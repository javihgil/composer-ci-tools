<?php

namespace Jhg\ComposerCiTools;

use Composer\Script\Event;
use Jhg\ComposerCiTools\Exception\GitHookAlreadyExistsException;
use Jhg\ComposerCiTools\Exception\GitRepositoryMissingException;
use Symfony\Component\Filesystem\Filesystem;

/**
 * Class GitHooksInstaller.
 */
class GitHooksInstaller extends AbstractScriptHandler
{
    /**
     * @param $hook
     *
     * @throws GitHookAlreadyExistsException
     * @throws GitRepositoryMissingException
     */
    protected static function installHook($hook)
    {
        if (!is_dir('.git')) {
            throw new GitRepositoryMissingException('The project is not under GIT version control.');
        }

        $hookScript = '#!/bin/sh'."\n";
        $hookScript .= '# Generated by composer hook installer'."\n";
        $hookScript .= sprintf('composer %s-hook', $hook);

        if (file_exists('.git/hooks/'.$hook)) {
            $hookContent = trim(file_get_contents('.git/hooks/'.$hook));

            if (!preg_match('/# Generated by composer hook installer/', $hookContent)) {
                throw new GitHookAlreadyExistsException(sprintf('%s GIT hook already exists. Remove it manualy before install composer hook', $hook));
            }
        }

        $fs = new Filesystem();
        $fs->dumpFile('.git/hooks/'.$hook, $hookScript);
        $fs->chmod('.git/hooks/'.$hook, 0755);
    }

    /**
     * @param Event $event
     *
     * @throws GitHookAlreadyExistsException
     * @throws GitRepositoryMissingException
     */
    public static function applyPatchMsg(Event $event)
    {
        self::installHook('applypatch-msg');
    }

    /**
     * @param Event $event
     *
     * @throws GitHookAlreadyExistsException
     * @throws GitRepositoryMissingException
     */
    public static function commitMsg(Event $event)
    {
        self::installHook('commit-msg');
    }

    /**
     * @param Event $event
     *
     * @throws GitHookAlreadyExistsException
     * @throws GitRepositoryMissingException
     */
    public static function postUpdate(Event $event)
    {
        self::installHook('post-update');
    }

    /**
     * @param Event $event
     *
     * @throws GitHookAlreadyExistsException
     * @throws GitRepositoryMissingException
     */
    public static function preApplyPatch(Event $event)
    {
        self::installHook('pre-applypatch');
    }

    /**
     * @param Event $event
     *
     * @throws GitHookAlreadyExistsException
     * @throws GitRepositoryMissingException
     */
    public static function preCommit(Event $event)
    {
        self::installHook('pre-commit');
    }

    /**
     * @param Event $event
     *
     * @throws GitHookAlreadyExistsException
     * @throws GitRepositoryMissingException
     */
    public static function prepareCommit(Event $event)
    {
        self::installHook('prepare-commit');
    }

    /**
     * @param Event $event
     *
     * @throws GitHookAlreadyExistsException
     * @throws GitRepositoryMissingException
     */
    public static function prePush(Event $event)
    {
        self::installHook('pre-push');
    }

    /**
     * @param Event $event
     *
     * @throws GitHookAlreadyExistsException
     * @throws GitRepositoryMissingException
     */
    public static function preRebase(Event $event)
    {
        self::installHook('pre-rebase');
    }

    /**
     * @param Event $event
     *
     * @throws GitHookAlreadyExistsException
     * @throws GitRepositoryMissingException
     */
    public static function update(Event $event)
    {
        self::installHook('update');
    }
}
